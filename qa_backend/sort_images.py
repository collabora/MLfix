# AUTOGENERATED! DO NOT EDIT! File to edit: 3. Sort images.ipynb (unless otherwise specified).

__all__ = ['load_bovw', 'nn_sort', 'sort_images']

# Internal Cell
from fastcore.script import *
from fastai.vision.all import *
from fastai.callback.wandb import *
from self_supervised.augmentations import *
from self_supervised.layers import *
from self_supervised.vision.barlow_twins import *

# fixup depreciation
from kornia import augmentation as korniatfm
korniatfm.GaussianBlur = korniatfm.RandomGaussianBlur

# Cell
def load_bovw(fname):
    data = np.load(fname, allow_pickle=True)
    bovw = np.unpackbits(data['bovw'], axis=1)
    fnames = [x.relative_to(Path('runs/detect/exp4/crops/')) for x in data['fnames']]
    return bovw, fnames

# Cell
def nn_sort(features, start_idx=None):
    N = len(features)
    if N > 7000:
        idxs1, neighsim1 = nn_sort(features[:N//2])
        idxs2, neighsim2 = nn_sort(features[N//2:])
        return idxs1 + idxs2, neighsim1 + neighsim2

#     features = features.copy() - .5
    if start_idx is not None:
        x = features[start_idx]
    else:
        x = random.choice(features)
    remaining = list(range(len(features)))
    idxs = []
    neighsim = []
    for _ in progress_bar(range(len(remaining))):
        dists = x@features[remaining].T
        i = dists.argsort()[-1]
        neighsim.append(dists[i])
        idxs.append(remaining[i])
        x = features[remaining[i]]
        remaining.pop(i)
    return idxs, neighsim

# Cell
@call_parse
def sort_images(
        path:Path, # path
        features_file:str = None # features file
    ):
    "Pretrain a model on images in `path`."
    path = path/'models'
    if features_file is None:
        ffiles = list(path.glob('*vw.npz'))
        if len(ffiles) == 0:
            raise Exception(f"No BoVW files found in: {path}!")
        elif len(ffiles) > 1:
            msg = f"Found multiple BoVW files in: {path}, please pass one of:"
            for file in ffiles:
                msg += f"\n  --feature_file {file}"
            raise Exception(msg)
        features_file = ffiles[0]

    bovw, fnames = load_bovw(features_file)

    keyfunc = lambda x: fnames[x].parent
    groups = [(name.name, list(group))
              for name, group in itertools.groupby(sorted(range(len(fnames)), key=keyfunc), keyfunc)]
    with open((path.parent/Path(features_file).name.replace("-features", "-grouped")).with_suffix('.json'), 'w') as f:
        json.dump(dict(
            dist_threshold = 1000,
            labeled_clusters = [dict(
                name = f"{name} â€“ sorted perceptualy",
                photos = [dict(
                    dist_to_mean=0, marked=False, murl=str(fnames[group[i]])
                ) for i in nn_sort(bovw[group])[0]]
            ) for name, group in groups]
        ), f)